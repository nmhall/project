#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2014, 11, 24, 5, 37, 16, 0)

__all__ = [
    'SingleAIGrammarParser',
    'SingleAIGrammarSemantics',
    'main'
]


class SingleAIGrammarParser(Parser):
    def __init__(self, whitespace=None, nameguard=True, **kwargs):
        super(SingleAIGrammarParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _allAIs_(self):
        self._dumbAI_()
        self.ast['dumbAI'] = self.last_node
        self._mediumAI_()
        self.ast['mediumAI'] = self.last_node
        self._smartAI_()
        self.ast['smartAI'] = self.last_node

        self.ast._define(
            ['dumbAI', 'mediumAI', 'smartAI'],
            []
        )

    @graken()
    def _dumbAI_(self):
        self._token('Short')
        self._token('{')
        self._singleAI_()
        self.ast['singleAI'] = self.last_node
        self._token('}')

        self.ast._define(
            ['singleAI'],
            []
        )

    @graken()
    def _mediumAI_(self):
        self._token('Int')
        self._token('{')
        self._singleAI_()
        self.ast['singleAI'] = self.last_node
        self._token('}')

        self.ast._define(
            ['singleAI'],
            []
        )

    @graken()
    def _smartAI_(self):
        self._token('Double')
        self._token('{')
        self._singleAI_()
        self.ast['singleAI'] = self.last_node
        self._token('}')

        self.ast._define(
            ['singleAI'],
            []
        )

    @graken()
    def _singleAI_(self):
        self._formationDef_()
        self.ast['formationDef'] = self.last_node
        self._movementDef_()
        self.ast['movementDef'] = self.last_node
        self._targetingDef_()
        self.ast['targetingDef'] = self.last_node

        self.ast._define(
            ['formationDef', 'movementDef', 'targetingDef'],
            []
        )

    @graken()
    def _formationDef_(self):
        self._token('Formation')
        self._token('{')
        with self._optional():
            self._formationRules_()
            self.ast['formationRules'] = self.last_node
        self._token('}')

        self.ast._define(
            ['formationRules'],
            []
        )

    @graken()
    def _movementDef_(self):
        self._token('Movement')
        self._token('{')
        with self._optional():
            self._movementRules_()
            self.ast['movementRules'] = self.last_node
        self._token('}')

        self.ast._define(
            ['movementRules'],
            []
        )

    @graken()
    def _targetingDef_(self):
        self._token('Targeting')
        self._token('{')
        with self._optional():
            self._targetingRules_()
            self.ast['targetingRules'] = self.last_node
        self._token('}')

        self.ast._define(
            ['targetingRules'],
            []
        )

    @graken()
    def _formationRules_(self):
        with self._optional():
            self._extraFormationRules_()
            self.ast['extraFormationRules'] = self.last_node
        self._token('default:')
        self._formation_()
        self.ast['defaultFormation'] = self.last_node

        self.ast._define(
            ['extraFormationRules', 'defaultFormation'],
            []
        )

    @graken()
    def _movementRules_(self):
        with self._optional():
            self._extraMovementRules_()
            self.ast['extraMovementRules'] = self.last_node
        self._token('default:')
        self._movement_()
        self.ast['defaultMovement'] = self.last_node

        self.ast._define(
            ['extraMovementRules', 'defaultMovement'],
            []
        )

    @graken()
    def _targetingRules_(self):
        with self._optional():
            self._extraTargetingRules_()
            self.ast['extraTargetingRules'] = self.last_node
        self._token('default:')
        self._targeting_()
        self.ast['defaultTargeting'] = self.last_node

        self.ast._define(
            ['extraTargetingRules', 'defaultTargeting'],
            []
        )

    @graken()
    def _extraFormationRules_(self):

        def block0():
            self._formationRule_()
            self.ast['formationRule'] = self.last_node
        self._positive_closure(block0)

        self.ast._define(
            ['formationRule'],
            []
        )

    @graken()
    def _extraMovementRules_(self):

        def block0():
            self._movementRule_()
            self.ast['movementRule'] = self.last_node
        self._positive_closure(block0)

        self.ast._define(
            ['movementRule'],
            []
        )

    @graken()
    def _extraTargetingRules_(self):

        def block0():
            self._targetingRule_()
            self.ast['targetingRule'] = self.last_node
        self._positive_closure(block0)

        self.ast._define(
            ['targetingRule'],
            []
        )

    @graken()
    def _formationRule_(self):
        self._conditional_()
        self.ast['conditional'] = self.last_node
        self._token(':')
        self._formation_()
        self.ast['formation'] = self.last_node

        self.ast._define(
            ['conditional', 'formation'],
            []
        )

    @graken()
    def _movementRule_(self):
        self._conditional_()
        self.ast['conditional'] = self.last_node
        self._token(':')
        self._movement_()
        self.ast['movement'] = self.last_node

        self.ast._define(
            ['conditional', 'movement'],
            []
        )

    @graken()
    def _targetingRule_(self):
        self._conditional_()
        self.ast['conditional'] = self.last_node
        self._token(':')
        self._targeting_()
        self.ast['targeting'] = self.last_node

        self.ast._define(
            ['conditional', 'targeting'],
            []
        )

    @graken()
    def _formation_(self):
        with self._choice():
            with self._option():
                self._token('tight formation')
            with self._option():
                self._token('loose formation')
            with self._option():
                self._token('isolation')
            self._error('expecting one of: isolation loose formation tight formation')

    @graken()
    def _movement_(self):
        with self._choice():
            with self._option():
                self._token('move toward')
            with self._option():
                self._token('move away')
            with self._option():
                self._token('hold ground')
            self._error('expecting one of: hold ground move away move toward')

    @graken()
    def _targeting_(self):
        with self._choice():
            with self._option():
                self._token('target closest')
            with self._option():
                self._token('target farthest')
            with self._option():
                self._token('target lowest health')
            with self._option():
                self._token('target smartest')
            with self._option():
                self._token('target highest range')
            self._error('expecting one of: target closest target farthest target highest range target lowest health target smartest')

    @graken()
    def _conditional_(self):
        self._token('if')
        self._condition_()
        self.ast['condition'] = self.last_node
        with self._optional():
            self._extraConditions_()

        self.ast._define(
            ['condition'],
            []
        )

    @graken()
    def _extraConditions_(self):
        self._token('and')
        self._condition_()
        self.ast['condition'] = self.last_node
        with self._optional():
            self._extraConditions_()

        self.ast._define(
            ['condition'],
            []
        )

    @graken()
    def _condition_(self):
        with self._choice():
            with self._option():
                self._enemyProximity_()
                self.ast['enemyProximity'] = self.last_node
            with self._option():
                self._allyProximity_()
                self.ast['allyProximity'] = self.last_node
            with self._option():
                self._myHealth_()
                self.ast['myHealth'] = self.last_node
            with self._option():
                self._enemyIQ_()
                self.ast['enemyIQ'] = self.last_node
            with self._option():
                self._enemyHealth_()
                self.ast['enemyHealth'] = self.last_node
            with self._option():
                self._enemyRange_()
                self.ast['enemyRange'] = self.last_node
            self._error('no available options')

        self.ast._define(
            ['enemyProximity', 'allyProximity', 'myHealth', 'enemyIQ', 'enemyHealth', 'enemyRange'],
            []
        )

    @graken()
    def _enemyProximity_(self):
        self._token('there are')
        self._number_()
        self.ast['number'] = self.last_node
        self._token('enemies')
        self._proximity_()
        self.ast['proximity'] = self.last_node

        self.ast._define(
            ['number', 'proximity'],
            []
        )

    @graken()
    def _allyProximity_(self):
        self._token('there are')
        self._number_()
        self.ast['number'] = self.last_node
        self._token('allies')
        self._proximity_()
        self.ast['proximity'] = self.last_node

        self.ast._define(
            ['number', 'proximity'],
            []
        )

    @graken()
    def _proximity_(self):
        with self._choice():
            with self._option():
                self._token('adjacent')
            with self._option():
                self._token('close')
            with self._option():
                self._token('around')
            self._error('expecting one of: adjacent around close')

    @graken()
    def _myHealth_(self):
        self._token('health')
        self._comparison_()
        self.ast['comparison'] = self.last_node
        self._number_()
        self.ast['number'] = self.last_node

        self.ast._define(
            ['comparison', 'number'],
            []
        )

    @graken()
    def _enemyIQ_(self):
        self._token('a nearby enemy has IQ')
        self._comparison_()
        self.ast['comparison'] = self.last_node
        self._number_()
        self.ast['number'] = self.last_node

        self.ast._define(
            ['comparison', 'number'],
            []
        )

    @graken()
    def _enemyHealth_(self):
        self._token('a nearby enemy has health')
        self._comparison_()
        self.ast['comparison'] = self.last_node
        self._number_()
        self.ast['number'] = self.last_node

        self.ast._define(
            ['comparison', 'number'],
            []
        )

    @graken()
    def _enemyRange_(self):
        self._token('a nearby enemy has range')
        self._comparison_()
        self.ast['comparison'] = self.last_node
        self._number_()
        self.ast['number'] = self.last_node

        self.ast._define(
            ['comparison', 'number'],
            []
        )

    @graken()
    def _comparison_(self):
        with self._choice():
            with self._option():
                self._token('<')
            with self._option():
                self._token('>')
            self._error('expecting one of: < >')

    @graken()
    def _number_(self):
        self._pattern(r'[0-9]+')


class SingleAIGrammarSemantics(object):
    def allAIs(self, ast):
        return ast

    def dumbAI(self, ast):
        return ast

    def mediumAI(self, ast):
        return ast

    def smartAI(self, ast):
        return ast

    def singleAI(self, ast):
        return ast

    def formationDef(self, ast):
        return ast

    def movementDef(self, ast):
        return ast

    def targetingDef(self, ast):
        return ast

    def formationRules(self, ast):
        return ast

    def movementRules(self, ast):
        return ast

    def targetingRules(self, ast):
        return ast

    def extraFormationRules(self, ast):
        return ast

    def extraMovementRules(self, ast):
        return ast

    def extraTargetingRules(self, ast):
        return ast

    def formationRule(self, ast):
        return ast

    def movementRule(self, ast):
        return ast

    def targetingRule(self, ast):
        return ast

    def formation(self, ast):
        return ast

    def movement(self, ast):
        return ast

    def targeting(self, ast):
        return ast

    def conditional(self, ast):
        return ast

    def extraConditions(self, ast):
        return ast

    def condition(self, ast):
        return ast

    def enemyProximity(self, ast):
        return ast

    def allyProximity(self, ast):
        return ast

    def proximity(self, ast):
        return ast

    def myHealth(self, ast):
        return ast

    def enemyIQ(self, ast):
        return ast

    def enemyHealth(self, ast):
        return ast

    def enemyRange(self, ast):
        return ast

    def comparison(self, ast):
        return ast

    def number(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = SingleAIGrammarParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in SingleAIGrammarParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for SingleAIGrammar.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )
